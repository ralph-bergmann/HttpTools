# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from `package:lints`.
# This set helps identify many issues that may lead to problems when running
# or consuming Dart code, and enforces writing Dart using a single, idiomatic
# style and format.
#
# If you want a smaller set of lints you can change this to specify
# 'package:lints/core.yaml'. These are just the most critical lints
# (the recommended set includes the core lints).
# The core lints are also what is used by pub.dev for scoring packages.

include: package:lints/recommended.yaml

formatter:
  page_width: 120
  trailing_commas: preserve

analyzer:
  exclude:
    - "**/*.pb.dart"
    - "**/*.pbenum.dart"
    - "**/*.pbjson.dart"
    - "**/*.pbserver.dart"
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

# For more information about the core and recommended set of lints, see
# https://dart.dev/go/core-lints
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    - always_declare_return_types # Declare method return types. https://dart.dev/lints/always_declare_return_types
    - always_put_control_body_on_new_line # Separate the control structure expression from its statement. https://dart.dev/lints/always_put_control_body_on_new_line
    - avoid_bool_literals_in_conditional_expressions # Avoid bool literals in conditional expressions. https://dart.dev/lints/avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors # Don't explicitly catch Error or types that implement it. https://dart.dev/lints/avoid_catching_errors
    - avoid_dynamic_calls # Avoid method calls or property accesses on a "dynamic" target. https://dart.dev/lints/avoid_dynamic_calls
    - avoid_escaping_inner_quotes # Avoid escaping inner quotes by changing outer quotes. https://dart.dev/lints/avoid_escaping_inner_quotes
    - avoid_multiple_declarations_per_line # Don't declare multiple variables on a single line. https://dart.dev/lints/avoid_multiple_declarations_per_line
    - avoid_positional_boolean_parameters # Avoid positional boolean parameters. https://dart.dev/lints/avoid_positional_boolean_parameters
    - avoid_redundant_argument_values # Don't pass an argument that matches the corresponding parameter's default value. https://dart.dev/lints/avoid_redundant_argument_values
    - avoid_setters_without_getters # Don't define a setter without a corresponding getter. https://dart.dev/lints/avoid_setters_without_getters
    - avoid_type_to_string # Avoid .toString() in production code since results may be minified. https://dart.dev/lints/avoid_type_to_string
    - avoid_types_on_closure_parameters # Avoid annotating types for function expression parameters. https://dart.dev/lints/avoid_types_on_closure_parameters
    - avoid_unused_constructor_parameters # Avoid defining unused parameters in constructors. https://dart.dev/lints/avoid_unused_constructor_parameters
    - cascade_invocations # Cascade consecutive method invocations on the same reference. https://dart.dev/lints/cascade_invocations
    - combinators_ordering # Sort combinator names alphabetically. https://dart.dev/lints/combinators_ordering
    - comment_references # Only reference in scope identifiers in doc comments. https://dart.dev/lints/comment_references
    - conditional_uri_does_not_exist # Missing conditional import. https://dart.dev/lints/conditional_uri_does_not_exist
    - deprecated_consistency # Missing deprecated annotation. https://dart.dev/lints/deprecated_consistency
    - directives_ordering # Adhere to Effective Dart Guide directives sorting conventions. https://dart.dev/lints/directives_ordering
    - discarded_futures # Don't invoke asynchronous functions in non-async blocks. https://dart.dev/lints/discarded_futures
    - eol_at_end_of_file # Put a single newline at end of file. https://dart.dev/lints/eol_at_end_of_file
    - matching_super_parameters # Use matching super parameter names. https://dart.dev/lints/matching_super_parameters
    - missing_whitespace_between_adjacent_strings # Missing whitespace between adjacent strings. https://dart.dev/lints/missing_whitespace_between_adjacent_strings
    - no_literal_bool_comparisons # Don't compare booleans to boolean literals. https://dart.dev/lints/no_literal_bool_comparisons
    - no_self_assignments # Don't assign a variable to itself. https://dart.dev/lints/no_self_assignments
    - noop_primitive_operations # Noop primitive operations. https://dart.dev/lints/noop_primitive_operations
    - omit_local_variable_types # Omit type annotations for local variables. https://dart.dev/lints/omit_local_variable_types
    - prefer_asserts_in_initializer_lists # Prefer putting asserts in initializer lists. https://dart.dev/lints/prefer_asserts_in_initializer_lists
    - prefer_const_constructors # Prefer const with constant constructors. https://dart.dev/lints/prefer_const_constructors
    - prefer_const_declarations # Prefer const over final for declarations. https://dart.dev/lints/prefer_const_declarations
    - prefer_constructors_over_static_methods # Prefer defining constructors instead of static methods to create instances. https://dart.dev/lints/prefer_constructors_over_static_methods
    - prefer_expression_function_bodies # Use => for short members whose body is a single return statement. https://dart.dev/lints/prefer_expression_function_bodies
    - prefer_final_in_for_each # Prefer final in for-each loop variable if reference is not reassigned. https://dart.dev/lints/prefer_final_in_for_each
    - prefer_final_locals # Prefer final for variable declarations if they are not reassigned. https://dart.dev/lints/prefer_final_locals
    - prefer_foreach # Use forEach to only apply a function to all the elements. https://dart.dev/lints/prefer_foreach
    - prefer_if_elements_to_conditional_expressions # Prefer if elements to conditional expressions where possible. https://dart.dev/lints/prefer_if_elements_to_conditional_expressions
    - prefer_int_literals # Prefer int literals over double literals. https://dart.dev/lints/prefer_int_literals
    - prefer_interpolation_to_compose_strings # Use interpolation to compose strings and values. https://dart.dev/lints/prefer_interpolation_to_compose_strings
    - prefer_mixin # Prefer using mixins. https://dart.dev/lints/prefer_mixin
    - prefer_null_aware_method_calls # Prefer null aware method calls. https://dart.dev/lints/prefer_null_aware_method_calls
    - prefer_null_aware_operators # Prefer using null aware operators. https://dart.dev/lints/prefer_null_aware_operators
    - prefer_relative_imports # Prefer relative imports for files in lib/. https://dart.dev/lints/prefer_relative_imports
    - prefer_single_quotes # Only use double quotes for strings containing single quotes. https://dart.dev/lints/prefer_single_quotes
    - require_trailing_commas # Use trailing commas for all function calls and declarations. https://dart.dev/lints/require_trailing_commas
    - sort_constructors_first # Sort constructor declarations before other members. https://dart.dev/lints/sort_constructors_first
    - sort_unnamed_constructors_first # Sort unnamed constructor declarations first. https://dart.dev/lints/sort_unnamed_constructors_first
    - test_types_in_equals # Test type arguments in operator ==(Object other). https://dart.dev/lints/test_types_in_equals
    - throw_in_finally # Avoid throw in finally block. https://dart.dev/lints/throw_in_finally
    - type_literal_in_constant_pattern # Don't use constant patterns with type literals. https://dart.dev/lints/type_literal_in_constant_pattern
    - unawaited_futures # Future results in async function bodies must be awaited or marked unawaited using dart:async. https://dart.dev/lints/unawaited_futures
    - unnecessary_await_in_return # Unnecessary await keyword in return. https://dart.dev/lints/unnecessary_await_in_return
    - unnecessary_breaks # Don't use explicit breaks when a break is implied. https://dart.dev/lints/unnecessary_breaks
    - unnecessary_lambdas # Don't create a lambda when a tear-off will do. https://dart.dev/lints/unnecessary_lambdas
    - use_colored_box # Use ColoredBox. https://dart.dev/lints/use_colored_box
    - use_decorated_box # Use DecoratedBox. https://dart.dev/lints/use_decorated_box
    - use_enums # Use enums rather than classes that behave like enums. https://dart.dev/lints/use_enums
    - use_if_null_to_convert_nulls_to_bools # Use ?? to convert nulls to bools. https://dart.dev/lints/use_if_null_to_convert_nulls_to_bools
    - use_named_constants # Use named constants. https://dart.dev/lints/use_named_constants
    - use_raw_strings # Use raw string to avoid escapes. https://dart.dev/lints/use_raw_strings
    - use_string_buffers # Use StringBuffer to compose strings. https://dart.dev/lints/use_string_buffers
    - use_super_parameters # Use super-initializer parameters where possible. https://dart.dev/lints/use_super_parameters
    - use_test_throws_matchers # Use throwsA matcher instead of fail(). https://dart.dev/lints/use_test_throws_matchers

# For additional information about configuring this file, see
# https://dart.dev/guides/language/analysis-options
